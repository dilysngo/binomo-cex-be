# Generated by Django 3.2.7 on 2022-08-12 12:45

import core.currency
import django.contrib.postgres.fields.jsonb
import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import lib.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccumulationDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('currency', core.currency.CurrencyModelField()),
                ('token_currency', core.currency.CurrencyModelField(null=True)),
                ('txid', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('from_address', models.CharField(db_index=True, max_length=100)),
                ('to_address', models.CharField(default='', max_length=100)),
                ('is_checked', models.BooleanField(default=False)),
                ('state', models.PositiveSmallIntegerField(choices=[(1, 'Pending'), (2, 'Completed'), (3, 'Failed')], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='AccumulationState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('current_balance', lib.fields.MoneyField(decimal_places=18, default=0, max_digits=32)),
                ('state', models.PositiveSmallIntegerField(choices=[(1, 'Waiting for check'), (2, 'Low balance'), (3, 'Gas required'), (4, 'Waiting for gas'), (5, 'Ready'), (6, 'Accumulation in process'), (7, 'Completed')])),
                ('wallet', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='core.userwallet')),
            ],
            options={
                'ordering': ['-updated'],
            },
        ),
        migrations.CreateModel(
            name='DepositsWithdrawalsStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('stats', django.contrib.postgres.fields.jsonb.JSONField(default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
            ],
        ),
        migrations.CreateModel(
            name='LastProcessedBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('currency', core.currency.CurrencyModelField(db_index=True, unique=True)),
                ('block_id', models.BigIntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ScoringSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_score', models.DecimalField(decimal_places=2, help_text='Minimal scoring to accumulate', max_digits=5)),
                ('deffered_scoring_time', models.IntegerField(default=0, help_text='Time to wait scoring in minutes')),
                ('min_tx_amount', lib.fields.MoneyField(decimal_places=8, default=0.001, max_digits=32)),
                ('currency', core.currency.CurrencyModelField(db_index=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TransactionInputScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('hash', models.TextField()),
                ('address', models.TextField()),
                ('score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('deposit_made', models.BooleanField(default=False)),
                ('accumulation_made', models.BooleanField(default=False)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('currency', core.currency.CurrencyModelField(blank=True, null=True)),
                ('token_currency', core.currency.CurrencyModelField(blank=True, null=True)),
                ('scoring_state', models.PositiveSmallIntegerField(choices=[(1, 'Scoring disabled'), (2, 'Amount too small'), (3, 'OK'), (4, 'Failed')], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='BNBWithdrawalApprove',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.withdrawalrequest',),
        ),
        migrations.CreateModel(
            name='BTCWithdrawalApprove',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.withdrawalrequest',),
        ),
        migrations.CreateModel(
            name='ETHWithdrawalApprove',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.withdrawalrequest',),
        ),
        migrations.CreateModel(
            name='TRXWithdrawalApprove',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.withdrawalrequest',),
        ),
        migrations.CreateModel(
            name='Keeper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('currency', core.currency.CurrencyModelField(db_index=True, unique=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('user_wallet', models.OneToOneField(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.userwallet')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GasKeeper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('currency', core.currency.CurrencyModelField(db_index=True, unique=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('user_wallet', models.OneToOneField(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.userwallet')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccumulationTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('amount', lib.fields.MoneyField(decimal_places=18, default=0, max_digits=32)),
                ('tx_type', models.PositiveSmallIntegerField(choices=[(1, 'Gas deposit'), (2, 'Accumulation')])),
                ('tx_state', models.PositiveSmallIntegerField(choices=[(1, 'Pending'), (2, 'Completed'), (3, 'Failed')], default=1)),
                ('tx_hash', models.TextField(default='', unique=True)),
                ('accumulation_state', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='cryptocoins.accumulationstate')),
            ],
            options={
                'ordering': ['-updated'],
            },
        ),
        migrations.AddIndex(
            model_name='accumulationtransaction',
            index=models.Index(fields=['tx_hash', 'tx_type', 'tx_state'], name='cryptocoins_tx_hash_a9c432_idx'),
        ),
        migrations.AddIndex(
            model_name='accumulationstate',
            index=models.Index(fields=['state'], name='cryptocoins_state_4b5838_idx'),
        ),
    ]
