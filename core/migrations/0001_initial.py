# Generated by Django 3.2.7 on 2022-08-12 12:45

import core.currency
import core.models.facade
import core.pairs
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import functools
import lib.fields
import lib.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('ip', models.CharField(default='', max_length=64)),
                ('username', models.CharField(default='', max_length=256)),
                ('method', models.CharField(default='', max_length=20)),
                ('uri', models.TextField(default='')),
                ('referer', models.TextField(default='')),
                ('status', models.CharField(default='200', max_length=3)),
                ('user_agent', models.TextField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='Balance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', core.currency.CurrencyModelField()),
                ('amount', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('amount_in_orders', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
            ],
        ),
        migrations.CreateModel(
            name='CoinInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', core.currency.CurrencyModelField(unique=True)),
                ('name', models.CharField(max_length=255)),
                ('is_base', models.BooleanField(default=False)),
                ('decimals', models.PositiveSmallIntegerField(default=8)),
                ('index', models.SmallIntegerField()),
                ('tx_explorer', models.CharField(default='', max_length=255)),
                ('links', models.JSONField(default=core.models.facade.default_coin_info_links)),
            ],
        ),
        migrations.CreateModel(
            name='DifBalance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('type', models.IntegerField(choices=[(1, 'Balance')], default=1)),
                ('currency', core.currency.CurrencyModelField(blank=True, db_index=True, null=True)),
                ('diff', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('diff_percent', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('balance', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('old_balance', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('calc_balance', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('txs_amount', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('sum_diff', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DifBalanceMonth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('type', models.IntegerField(choices=[(1, 'Balance')], default=1)),
                ('currency', core.currency.CurrencyModelField(blank=True, db_index=True, null=True)),
                ('diff', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('diff_percent', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('balance', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('old_balance', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('calc_balance', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('txs_amount', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('sum_diff', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DisabledCoin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', core.currency.CurrencyModelField(unique=True)),
                ('disable_topups', models.BooleanField(default=False)),
                ('disable_withdrawals', models.BooleanField(default=False)),
                ('disable_exchange', models.BooleanField(default=False)),
                ('disable_pairs', models.BooleanField(default=False)),
                ('disable_stack', models.BooleanField(default=False)),
                ('disable_all', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Exchange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('operation', models.PositiveSmallIntegerField(choices=[(0, 'Buy'), (1, 'Sell')])),
                ('base_currency', core.currency.CurrencyModelField()),
                ('quote_currency', core.currency.CurrencyModelField()),
                ('quantity', lib.fields.MoneyField(decimal_places=8, max_digits=32)),
                ('cost', lib.fields.MoneyField(decimal_places=8, max_digits=32)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExecutionResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('pair', core.pairs.PairModelField()),
                ('cancelled', models.BooleanField(default=False)),
                ('quantity', lib.fields.MoneyField(decimal_places=8, max_digits=32)),
                ('fee_rate', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('price', lib.fields.MoneyField(decimal_places=8, max_digits=32, null=True)),
                ('matched_order_price', lib.fields.MoneyField(decimal_places=8, max_digits=32, null=True)),
                ('fee_amount', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
            ],
        ),
        migrations.CreateModel(
            name='ExpiringToken',
            fields=[
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False, verbose_name='Key')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('last_used', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Token',
                'verbose_name_plural': 'Tokens',
            },
        ),
        migrations.CreateModel(
            name='ExternalPricesHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('pair', core.pairs.PairModelField()),
                ('price', lib.fields.MoneyField(blank=True, decimal_places=8, max_digits=32, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FeesAndLimits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', core.currency.CurrencyModelField(unique=True)),
                ('limits_deposit_min', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
                ('limits_deposit_max', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
                ('limits_withdrawal_min', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
                ('limits_withdrawal_max', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
                ('limits_order_min', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
                ('limits_order_max', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
                ('limits_code_max', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
                ('limits_accumulation_min', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
                ('fee_deposit_address', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
                ('fee_deposit_code', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
                ('fee_withdrawal_code', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
                ('fee_order_limits', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
                ('fee_order_market', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
                ('fee_exchange_value', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
            ],
        ),
        migrations.CreateModel(
            name='InoutsStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', core.currency.CurrencyModelField()),
                ('deposits', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('withdrawals', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
            ],
        ),
        migrations.CreateModel(
            name='LoginHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user_agent', models.CharField(max_length=255)),
                ('ip', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('subject', models.CharField(max_length=200)),
                ('content', models.CharField(max_length=1000)),
                ('read', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('type', models.PositiveSmallIntegerField(choices=[(0, 'Limit'), (1, 'Market'), (2, 'External'), (3, 'Exchange'), (4, 'Stop limit')])),
                ('operation', models.PositiveSmallIntegerField(choices=[(0, 'Buy'), (1, 'Sell')])),
                ('state', models.PositiveSmallIntegerField(choices=[(0, 'Opened'), (1, 'Closed'), (2, 'Canceled'), (3, 'Moderated')], default=0)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Not set'), (99, 'Reverted')], default=0)),
                ('pair', core.pairs.PairModelField()),
                ('executed', models.BooleanField(default=False)),
                ('quantity', lib.fields.MoneyField(decimal_places=8, max_digits=32)),
                ('price', lib.fields.MoneyField(decimal_places=8, max_digits=32, null=True)),
                ('cost', lib.fields.MoneyField(blank=True, decimal_places=8, max_digits=32, null=True)),
                ('price_ts', models.DateTimeField(auto_now_add=True)),
                ('quantity_left', lib.fields.MoneyField(decimal_places=8, max_digits=32)),
                ('vwap', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('otc_limit', lib.fields.MoneyField(blank=True, decimal_places=8, max_digits=32, null=True)),
                ('otc_percent', lib.fields.MoneyField(blank=True, decimal_places=8, max_digits=32, null=True)),
                ('stop', lib.fields.MoneyField(blank=True, decimal_places=8, max_digits=32, null=True)),
                ('in_stack', models.BooleanField(default=True)),
                ('state_changed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrderChangeHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('quantity', lib.fields.MoneyField(blank=True, decimal_places=8, max_digits=32, null=True)),
                ('price', lib.fields.MoneyField(blank=True, decimal_places=8, max_digits=32, null=True)),
                ('otc_percent', lib.fields.MoneyField(blank=True, decimal_places=8, max_digits=32, null=True)),
                ('otc_limit', lib.fields.MoneyField(blank=True, decimal_places=8, max_digits=32, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OrderRevert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrderStateChangeHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('prev_state', models.PositiveSmallIntegerField(choices=[(0, 'Opened'), (1, 'Closed'), (2, 'Canceled'), (3, 'Moderated')], default=0)),
                ('prev_status', models.PositiveSmallIntegerField(choices=[(0, 'Not set'), (99, 'Reverted')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='PairSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pair', core.pairs.PairModelField(unique=True)),
                ('is_enabled', models.BooleanField(default=True)),
                ('is_autoorders_enabled', models.BooleanField(default=True)),
                ('price_source', models.SmallIntegerField(choices=[(1, 'External'), (2, 'Custom')], default=1)),
                ('custom_price', lib.fields.MoneyField(decimal_places=8, default=0.0, max_digits=32)),
                ('deviation', models.DecimalField(decimal_places=4, default=0.0, help_text='Max order price deviation', max_digits=5)),
            ],
        ),
        migrations.CreateModel(
            name='PayGateTopup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('currency', core.currency.CurrencyModelField()),
                ('amount', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('state', models.IntegerField(choices=[(0, 'Pending'), (1, 'Completed'), (2, 'Failed')], default=0)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('gate_id', models.IntegerField(choices=[])),
                ('our_fee_amount', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Not set'), (99, 'Reverted')], default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PayGateTopupRevert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('auto_logout_timeout', models.IntegerField(default=60)),
                ('payouts_freezed_till', models.DateTimeField(blank=True, default=None, null=True)),
                ('api_key', models.CharField(default=functools.partial(lib.utils.generate_random_string, *(), **{'length': 32}), max_length=64)),
                ('secret_key', models.CharField(default=functools.partial(lib.utils.generate_random_string, *(), **{'length': 32}), max_length=64)),
                ('api_callback_url', models.URLField(blank=True, max_length=255, null=True)),
                ('birth_day', models.DateTimeField(blank=True, default=None, null=True)),
                ('country', django_countries.fields.CountryField(blank=True, default=None, max_length=2, null=True)),
                ('register_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('interface', models.CharField(blank=True, choices=[('advance', 'Advance'), ('simple', 'Simple')], default=None, max_length=64, null=True)),
                ('phone', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('is_sof_verified', models.BooleanField(default=False)),
                ('language', models.CharField(choices=[('en', 'English'), ('ru', 'Russian')], default='en', max_length=10)),
                ('sepa_remittance_id', models.CharField(default=core.models.facade.generate_remittance_id, max_length=12, unique=True)),
                ('is_auto_orders_enabled', models.BooleanField(default=False)),
                ('email_ip_changed', models.BooleanField(default=False)),
                ('email_failed_login', models.BooleanField(default=True)),
                ('withdrawals_sms_confirmation', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SmsHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('phone', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('withdrawals_sms_confirmation', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SourceOfFunds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_beneficiary', models.NullBooleanField()),
                ('profession', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Private company employee'), (2, 'State employee'), (3, 'Business owner'), (4, 'Professional'), (5, 'Agriculturist'), (6, 'Retired'), (7, 'Housewife'), (8, 'Student'), (9, 'Trader')], null=True), blank=True, null=True, size=None)),
                ('source', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Employment Income'), (2, 'Savings / deposits'), (3, 'Property Sale'), (4, 'Sale of shares or other investment'), (5, 'Loan'), (6, 'Company Sale'), (7, 'Company Profits / Dividends')], null=True), blank=True, null=True, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='TradesAggregatedStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('pair', core.pairs.PairModelField()),
                ('ts', models.DateTimeField()),
                ('period', models.PositiveSmallIntegerField(choices=[(1, 'minute'), (2, 'hour'), (3, 'day')])),
                ('min_price', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('max_price', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('avg_price', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('open_price', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('close_price', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('volume', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('amount', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
                ('num_trades', models.IntegerField(default=0)),
                ('fee_base', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('fee_quoted', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('currency', core.currency.CurrencyModelField()),
                ('amount', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('reason', models.PositiveSmallIntegerField(choices=[(1, 'Topup'), (2, 'Withdrawal'), (3, 'Withdrawal return'), (10, 'Order set'), (11, 'Order executed'), (12, 'Order canceled'), (13, 'Order cacheback'), (14, 'order extra charge'), (15, 'order partial charge return'), (30, 'fee topup'), (31, 'bonus paid'), (32, 'bonus topup'), (16, 'order revert charge'), (17, 'order revert return'), (18, 'paygate revert charge'), (19, 'paygate revert return'), (24, 'wallet revert charge'), (25, 'wallet revert return'), (40, 'Stake'), (41, 'Unstake'), (42, 'Lock'), (43, 'Unlock'), (44, 'Stake Earnings'), (50, 'Manual Topup')])),
                ('state', models.PositiveSmallIntegerField(choices=[(0, 'Pending'), (1, 'Completed'), (2, 'Canceled'), (3, 'Failed')], default=0)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('internal', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='TwoFactorSecretHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TwoFactorSecretTokens',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('secret', models.CharField(blank=True, default=None, max_length=200, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserExchangeFee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('fee_rate', lib.fields.MoneyField(blank=True, decimal_places=8, default=0.002, max_digits=32, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserFee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('fee_rate', lib.fields.MoneyField(blank=True, decimal_places=8, default=0.001, max_digits=32, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserKYC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('applicantId', models.CharField(blank=True, default='', max_length=200)),
                ('reviewAnswer', models.CharField(blank=True, default='', max_length=200)),
                ('kyc_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('last_kyc_data_update', models.DateTimeField(blank=True, null=True)),
                ('forced_approve', models.BooleanField(default=False)),
                ('rejectType', models.CharField(choices=[('FINAL', 'Final'), ('RETRY', 'Retry'), ('EXTERNAL', 'External')], default=None, max_length=255, null=True)),
                ('moderationComment', models.CharField(blank=True, max_length=250, null=True)),
                ('rejectLabels', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=250, null=True), blank=True, null=True, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='UserPairDailyStat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('pair', core.pairs.PairModelField()),
                ('day', models.DateField()),
                ('currency1', core.currency.CurrencyModelField()),
                ('currency2', core.currency.CurrencyModelField()),
                ('volume_got1', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('volume_got2', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('fee_amount_paid1', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('fee_amount_paid2', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('volume_spent1', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('volume_spent2', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
            ],
        ),
        migrations.CreateModel(
            name='UserRestrictions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('disable_topups', models.BooleanField(default=False)),
                ('disable_withdrawals', models.BooleanField(default=False)),
                ('disable_orders', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserWallet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('currency', core.currency.CurrencyModelField(db_index=True)),
                ('blockchain_currency', core.currency.CurrencyModelField(default='BTC')),
                ('address', models.TextField(db_index=True)),
                ('private_key', models.TextField(blank=True, null=True)),
                ('merchant', models.BooleanField(default=False)),
                ('block_type', models.SmallIntegerField(choices=[(0, 'Not blocked'), (1, 'Deposits'), (2, 'Deposits + Accumulations')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='WalletHistoryItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('state', models.PositiveSmallIntegerField(choices=[(0, 'Pending'), (1, 'To be sent'), (2, 'Done'), (3, 'Canceled'), (4, 'Failed'), (5, 'Unknown'), (7, 'Reverted'), (8, 'Verifying')], default=0)),
                ('operation_type', models.PositiveSmallIntegerField(choices=[(1, 'Deposit'), (2, 'Withdrawal'), (3, 'Merchant'), (4, 'Revert'), (5, 'Revert Return'), (6, 'Revert Charge'), (7, 'Stake'), (8, 'Unstake'), (9, 'Lock'), (10, 'Unlock'), (11, 'Stake Earnings')])),
                ('currency', core.currency.CurrencyModelField()),
                ('amount', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
                ('tx_hash', models.CharField(default=str, max_length=255)),
                ('address', models.CharField(default=str, max_length=255)),
                ('confirmations_count', models.PositiveSmallIntegerField(default=0)),
                ('confirmed', models.BooleanField(default=False)),
                ('paygate_id', models.PositiveSmallIntegerField(default=0)),
                ('paygate_method', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Visa'), (1, 'Mastercard'), (2, 'QIWI'), (3, 'Account'), (4, 'Referral bonus')], default=None, null=True)),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='WalletTransactions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('currency', core.currency.CurrencyModelField()),
                ('amount', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('tx_hash', models.CharField(max_length=250)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Not set'), (99, 'Reverted')], default=0)),
                ('state', models.PositiveSmallIntegerField(choices=[(1, 'Not checked'), (2, 'Accumulated'), (3, 'Not accumulated'), (4, 'Wrong amount'), (5, 'Wrong accumulation'), (6, 'Bad deposit')], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='WalletTransactionsRevert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WithdrawalFee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', core.currency.CurrencyModelField()),
                ('blockchain_currency', core.currency.CurrencyModelField()),
                ('address_fee', models.DecimalField(decimal_places=8, default=0, max_digits=32)),
            ],
        ),
        migrations.CreateModel(
            name='WithdrawalLimitLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('level', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='WithdrawalUserLimit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('limit', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.withdrawallimitlevel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WithdrawalRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('currency', core.currency.CurrencyModelField()),
                ('amount', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('amount_usdt', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('state', models.IntegerField(choices=[(0, 'Created'), (1, 'Pending'), (2, 'Completed'), (3, 'Failed'), (4, 'Cancelled'), (5, 'Verifying')], default=0)),
                ('txid', models.CharField(blank=True, max_length=250, null=True)),
                ('approved', models.BooleanField(default=False)),
                ('confirmed', models.BooleanField(default=False)),
                ('our_fee_amount', lib.fields.MoneyField(decimal_places=8, default=0, max_digits=32)),
                ('sci_gate_id', models.IntegerField(blank=True, null=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('confirmation_token', models.CharField(blank=True, default=None, max_length=64, null=True, unique=True)),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='withdrawal_request', to='core.transaction')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='withdrawallimitlevel',
            index=models.Index(fields=['level'], name='core_withdr_level_be5938_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='withdrawalfee',
            unique_together={('currency', 'blockchain_currency')},
        ),
        migrations.AddField(
            model_name='wallettransactionsrevert',
            name='origin_transaction',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wallet_tr_origin_transaction', to='core.transaction'),
        ),
        migrations.AddField(
            model_name='wallettransactionsrevert',
            name='transaction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wallet_tr_reverted_transaction', to='core.transaction'),
        ),
        migrations.AddField(
            model_name='wallettransactionsrevert',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='wallettransactionsrevert',
            name='wallet_transaction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wallet_transactions_revert', to='core.wallettransactions'),
        ),
        migrations.AddField(
            model_name='wallettransactions',
            name='transaction',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wallet_transaction', to='core.transaction'),
        ),
        migrations.AddField(
            model_name='wallettransactions',
            name='wallet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wallet_transaction', to='core.userwallet'),
        ),
        migrations.AddField(
            model_name='wallethistoryitem',
            name='transaction',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.transaction'),
        ),
        migrations.AddField(
            model_name='wallethistoryitem',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userwallet',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userrestrictions',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='restrictions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userpairdailystat',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userkyc',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userfee',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userexchangefee',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='twofactorsecrettokens',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='twofactorsecrethistory',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='transaction',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='tradesaggregatedstats',
            unique_together={('pair', 'ts', 'period')},
        ),
        migrations.AddField(
            model_name='sourceoffunds',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='smshistory',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='profile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='paygatetopuprevert',
            name='origin_transaction',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='paygate_origin_transaction', to='core.transaction'),
        ),
        migrations.AddField(
            model_name='paygatetopuprevert',
            name='paygate_topup',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paygate_topup_revert', to='core.paygatetopup'),
        ),
        migrations.AddField(
            model_name='paygatetopuprevert',
            name='transaction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paygate_reverted_transaction', to='core.transaction'),
        ),
        migrations.AddField(
            model_name='paygatetopuprevert',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='paygatetopup',
            name='tx',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='paygate_topup', to='core.transaction'),
        ),
        migrations.AddField(
            model_name='paygatetopup',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='orderstatechangehistory',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='state_changes_history', to='core.order'),
        ),
        migrations.AddField(
            model_name='orderrevert',
            name='matched_order',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matched_order_revert', to='core.order'),
        ),
        migrations.AddField(
            model_name='orderrevert',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_revert', to='core.order'),
        ),
        migrations.AddField(
            model_name='orderrevert',
            name='origin_transaction',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_origin_transaction', to='core.transaction'),
        ),
        migrations.AddField(
            model_name='orderrevert',
            name='transaction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_reverted_transaction', to='core.transaction'),
        ),
        migrations.AddField(
            model_name='orderrevert',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='orderchangehistory',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='changes_history', to='core.order'),
        ),
        migrations.AddField(
            model_name='order',
            name='in_transaction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_in_transaction', to='core.transaction'),
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='message',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='loginhistory',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='expiringtoken',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='facade_auth_token', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='executionresult',
            name='cacheback_transaction',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.transaction'),
        ),
        migrations.AddField(
            model_name='executionresult',
            name='fee_aggregate_tx',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.transaction'),
        ),
        migrations.AddField(
            model_name='executionresult',
            name='matched_order',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.order'),
        ),
        migrations.AddField(
            model_name='executionresult',
            name='order',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='core.order'),
        ),
        migrations.AddField(
            model_name='executionresult',
            name='transaction',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.transaction'),
        ),
        migrations.AddField(
            model_name='executionresult',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='exchange',
            name='order',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.order'),
        ),
        migrations.AddField(
            model_name='exchange',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='difbalancemonth',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='difbalance',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='balance',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='withdrawalrequest',
            index=models.Index(fields=['confirmation_token'], name='core_withdr_confirm_f68022_idx'),
        ),
        migrations.AddIndex(
            model_name='wallethistoryitem',
            index=models.Index(fields=['created', 'updated'], name='core_wallet_created_630173_idx'),
        ),
        migrations.AddIndex(
            model_name='wallethistoryitem',
            index=models.Index(fields=['state'], name='core_wallet_state_cb85d4_idx'),
        ),
        migrations.AddIndex(
            model_name='wallethistoryitem',
            index=models.Index(fields=['operation_type'], name='core_wallet_operati_2b86e3_idx'),
        ),
        migrations.AddIndex(
            model_name='wallethistoryitem',
            index=models.Index(fields=['currency'], name='core_wallet_currenc_f8c241_idx'),
        ),
        migrations.AddIndex(
            model_name='wallethistoryitem',
            index=models.Index(fields=['confirmed'], name='core_wallet_confirm_5d6266_idx'),
        ),
        migrations.AddIndex(
            model_name='wallethistoryitem',
            index=models.Index(fields=['paygate_id'], name='core_wallet_paygate_d319bb_idx'),
        ),
        migrations.AddIndex(
            model_name='wallethistoryitem',
            index=models.Index(fields=['paygate_method'], name='core_wallet_paygate_100df2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userwallet',
            unique_together={('currency', 'address')},
        ),
        migrations.AlterUniqueTogether(
            name='userpairdailystat',
            unique_together={('user', 'day', 'pair')},
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['created', 'updated'], name='core_transa_created_26a07e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='executionresult',
            unique_together={('order', 'matched_order')},
        ),
        migrations.AlterUniqueTogether(
            name='balance',
            unique_together={('user', 'currency')},
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=150, unique=True)),
                ('value', models.CharField(blank=True, default='', max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='SmsConfirmationHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('phone', models.CharField(max_length=64)),
                ('action_type', models.PositiveSmallIntegerField(choices=[(1, 'Send SMS'), (2, 'Verify Code')])),
                ('verification_type',
                 models.PositiveSmallIntegerField(choices=[(1, 'Withdrawal'), (2, 'Phone'), (3, 'Disable sms')])),
                ('is_success', models.BooleanField(default=False)),
                ('code', models.CharField(blank=True, max_length=8, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
